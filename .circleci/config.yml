version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0.0
executors:
  app-executor:
    docker:
      - image: cimg/node:20.5.1
      - image: cimg/base:2023.08
    working_directory: ~/repo
  terraform-executor:
    docker:
      - image: hashicorp/terraform:latest
      - image: cimg/base:2023.08

aliases:
  - &show-current-branch-name
    run:
      name: Show current branch name
      command: echo "Current branch name is $CIRCLE_BRANCH"
  - &restore-cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
        - app-
  - &install-dependencies
    run:
      name: Install dependencies
      command: pnpm install --no-frozen-lockfile
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &connect-to-aws
    aws-cli/setup:
      aws_access_key_id: AWS_ACCESS_KEY_ID
      aws_secret_access_key: AWS_SECRET_ACCESS_KEY
      region: ${AWS_DEFAULT_REGION}
  - &persist-outputs
    persist_to_workspace:
      root: ~/tmp
      paths:
        - outputs
  - &persist-scripts
    persist_to_workspace:
      root: ~/tmp
      paths:
        - scripts
  - &attach-to-tmp
    attach_workspace:
      at: ~/tmp
jobs:
  install-dependencies:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache
  linting:
    executor: app-executor
    steps:
      - checkout
      - *restore-cache
      - run:
          name: Run linting
          command: pnpm run lint:check
  code-formatter-check:
    executor: app-executor
    steps:
      - checkout
      - *restore-cache
      - run:
          name: Run code formatter check
          command: pnpm run prettier:check
  fetch-utilities:
    executor: app-executor
    steps:
      - *connect-to-aws
      - run: 
          name: Download utility scripts from AWS
          command: |
            echo 'Downloading utility scripts from AWS'
            aws --region ${AWS_DEFAULT_REGION} s3 cp s3://${TMP_BUCKET_NAME}/scripts ~/tmp/scripts --recursive
      - *persist-scripts
  fetch-kms-key-id:
    executor: app-executor
    steps:
      - *attach-to-tmp
      - *connect-to-aws
      - run:
          name: Run extract-key-id.sh script
          shell: /bin/bash
          command: |
            export REGION=${AWS_DEFAULT_REGION}

            echo ${AWS_DEFAULT_REGION}

            alias_name=$(aws --region ${AWS_DEFAULT_REGION} kms list-aliases \
              --query "Aliases[?starts_with(AliasName, 'alias/attendio-env-fe')].AliasName" \
              --output text)

            # Exit if no alias matches the pattern
            if [ -z "$alias_name" ]; then
              echo "No KMS key found with the specified alias pattern."
              exit 1
            fi

            # Get the target key ID for the found alias
            key_id=$(aws kms --region ${AWS_DEFAULT_REGION} describe-key \
              --key-id "${alias_name}" \
              --query "KeyMetadata.KeyId" \
              --output text)

            # Get the key status
            key_status=$(aws kms --region ${AWS_DEFAULT_REGION} describe-key \
              --key-id "$key_id" \
              --query "KeyMetadata.KeyState" \
              --output text)

            echo "Alias Name: ${alias_name}"
            echo "Key ID: ${key_id}"

            # Check if the key is enabled
            if [ "$key_status" == "Enabled" ]; then
              echo "The KMS key with ID $key_id is enabled."
            else
              echo "The KMS key with ID $key_id is not in 'Enabled' status."
            fi
            
            mkdir -p ~/tmp/outputs
            echo ${key_id} > ~/tmp/outputs/kms_key_id.txt
      - *persist-outputs
  prepare-env:
    executor: app-executor
    steps:
      - checkout
      - *restore-cache
      - *connect-to-aws
      - *attach-to-tmp
      - run:
          name: Encrypt env variables and push them to AWS
          shell: /bin/bash
          command: |
            rm -rf .env.local
            
            # Setup required variables for the scripts to run successfully
            export CLIENT=frontend
            export REGION=${AWS_DEFAULT_REGION}
            export ENVIRONMENT=${CIRCLE_BRANCH}
            export ENV_KMS_KEY_ID=$(cat ~/tmp/outputs/kms_key_id.txt)

            chmod +x ~/tmp/scripts/env/utils.sh
            . ~/tmp/scripts/env/utils.sh

            fetch_env

            # Change .env.local to match environment needs 
            PROPERTIES_TO_MODIFY="VITE_JWT_ACCESS_TOKEN_SECRET,VITE_APP_ENVIRONMENT,SERVER_URL"
            NEW_VALUES="${VITE_JWT_ACCESS_TOKEN_SECRET},${CIRCLE_BRANCH},${SERVER_URL}"
            modify_properties ${PROPERTIES_TO_MODIFY} ${NEW_VALUES}

            # Encrypt .env.local and push it to AWS
            package_and_encrypt_env
  upload-build-to-s3:
    executor: app-executor
    steps:
      - checkout
      - *connect-to-aws
      - *restore-cache
      - *attach-to-tmp
      - run:
          name: Download .env.local from AWS and decrypt
          command: |
            export CLIENT=frontend
            export REGION=${AWS_DEFAULT_REGION}
            export ENVIRONMENT=${CIRCLE_BRANCH}
            export ENV_KMS_KEY_ID=$(cat ~/tmp/outputs/kms_key_id.txt)

            . ~/tmp/scripts/env/utils.sh
            fetch_env
      - run:
          name: Build the project
          command: |
            # Prepare local files
            rm -rf dist .env.local
            pnpm run build
      - run:
          name: Upload build to S3
          command: |
            export S3_BUCKET_NAME=$(cat ~/tmp/outputs/www_bucket_name.txt)
            aws --region ${AWS_DEFAULT_REGION} s3 cp dist s3://${S3_BUCKET_NAME} --recursive

workflows:
  build_and_deploy:
    jobs:
      - install-dependencies
      - linting:
          requires:
            - install-dependencies
          filters:  
            branches:
              only:
                - stage
                - main
      - code-formatter-check:
          requires:
            - install-dependencies
          filters:  
            branches:
              only:
                - stage
                - main
      - fetch-utilities:
          context: << pipeline.git.branch >>
          requires:
            - linting
            - code-formatter-check
          filters:  
            branches:
              only:
                - stage
                - main
      - fetch-kms-key-id:
          context: << pipeline.git.branch >>
          requires:
            - fetch-utilities
          filters:  
            branches:
              only:
                - stage
                - main
      - prepare-env:
          context: << pipeline.git.branch >>
          requires:
            - fetch-kms-key-id
          filters:  
            branches:
              only:
                - stage
                - main
      - upload-build-to-s3:
          context: << pipeline.git.branch >>
          requires:
            - prepare-env
          filters:  
            branches:
              only:
                - stage
                - main