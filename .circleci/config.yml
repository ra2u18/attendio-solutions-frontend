version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0.0
executors:
  app-executor:
    docker:
      - image: cimg/node:20.5.1
      - image: cimg/base:2023.08
    working_directory: ~/repo
  terraform-executor:
    docker:
      - image: hashicorp/terraform:latest
      - image: cimg/base:2023.08
    working_directory: ~/repo/.deploy/terraform/$CIRCLE_BRANCH/services/frontend # TODO: change stage to $CIRLCLE_BRANCH

aliases:
  - &show-current-branch-name
    run:
      name: Show current branch name
      command: echo "Current branch name is $CIRCLE_BRANCH"
  - &restore-cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
        - app-
  - &install-dependencies
    run:
      name: Install dependencies
      command: pnpm install --no-frozen-lockfile
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}

jobs:
  install-dependencies:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache
  linting:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run linting
          command: pnpm run lint:check
  code-formatter-check:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run code formatter check
          command: pnpm run prettier:check
  fetch-utilities:
    executor: app-executor
    steps:
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: ${AWS_DEFAULT_REGION}
      - run: 
          name: Download utility scripts from AWS
          command: |
            echo 'Downloading utility scripts from AWS'
            aws --region ${AWS_DEFAULT_REGION} s3 cp s3://${TMP_BUCKET_NAME}/backend/scripts ~/tmp/scripts --recursive
      - persist_to_workspace:
          root: ~/tmp
          paths:
            - scripts
  fetch-kms-key-id:
    executor: app-executor
    steps:
      - attach_workspace:
          at: ~/tmp
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: ${AWS_DEFAULT_REGION}
      - run:
          name: Run extract-key-id.sh script
          command: |
            export REGION=${AWS_DEFAULT_REGION}
            export KMS_KEY_ALIAS=${KMS_KEY_ALIAS}

            chmod +x ~/tmp/scripts/aws/query/extract-key-id.sh
            . ~/tmp/scripts/aws/query/extract-key-id.sh
            
            mkdir -p ~/tmp/outputs
            echo ${KMS_KEY_ID} > ~/tmp/outputs/kms_key_id.txt
      - persist_to_workspace:
          root: ~/tmp
          paths:
            - outputs
  prepare-env:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/tmp
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: ${AWS_DEFAULT_REGION}
      - run:
          name: Encrypt env variables and push them to AWS
          command: |
            export CLIENT=frontend
            export REGION=${AWS_DEFAULT_REGION}
            export ENVIRONMENT=${CIRCLE_BRANCH}
            export ENV_KMS_KEY_ID=$(cat ~/tmp/outputs/kms_key_id.txt)

            chmod +x ~/tmp/scripts/env/utils.sh
            . ~/tmp/scripts/env/utils.sh

            PROPERTIES_TO_MODIFY="VITE_JWT_ACCESS_TOKEN_SECRET,VITE_APP_ENVIRONMENT,SERVER_URL"
            NEW_VALUES="${VITE_JWT_ACCESS_TOKEN_SECRET},${CIRCLE_BRANCH},${SERVER_URL}"

            modify_properties ${PROPERTIES_TO_MODIFY} ${NEW_VALUES}
            package_and_encrypt_env

  terraform-validate:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform validate and format
          command: |
            terraform init -backend=false
            terraform validate && terraform fmt
  terraform-plan-and-apply:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run: mkdir -p ~/tmp/outputs
      - run:
          name: Terraform plan and apply
          command: |
            terraform init
            terraform workspace select $CIRCLE_BRANCH || terraform workspace new $CIRCLE_BRANCH  
            terraform plan
      - run:
          name: Terraform apply
          command: |
            terraform workspace select $CIRCLE_BRANCH
            terraform apply -auto-approve

            terraform output cloudfront_distribution_id > ~/tmp/outputs/cloudfront_distribution_id.txt
            terraform output www_bucket_name > ~/tmp/outputs/www_bucket_name.txt
      - persist_to_workspace:
          root: ~/tmp
          paths:
            - outputs
  upload-build-to-s3:
    executor: app-executor
    steps:
      - checkout
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
      - *restore-cache
      - run:
          name: Export the S3 bucket name to an environment variable
          command: export S3_BUCKET_NAME=$(cat ~/tmp/outputs/www_bucket_name.txt)
  terraform-destroy:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform destroy
          command: |
            terraform init
            terraform workspace select $CIRCLE_BRANCH || terraform workspace new $CIRCLE_BRANCH
            terraform destroy -auto-approve

workflows:
  build_and_deploy:
    jobs:
      - install-dependencies
      - linting:
          requires:
            - install-dependencies
          filters:  
            branches:
              only:
                - stage
                - main
      - code-formatter-check:
          requires:
            - install-dependencies
          filters:  
            branches:
              only:
                - stage
                - main
      - fetch-utilities:
          context: << pipeline.git.branch >>
          requires:
            - linting
            - code-formatter-check
          filters:  
            branches:
              only:
                - stage
                - main
      - fetch-kms-key-id:
          context: << pipeline.git.branch >>
          requires:
            - fetch-utilities
          filters:  
            branches:
              only:
                - stage
                - main
      - prepare-env:
          context: << pipeline.git.branch >>
          requires:
            - fetch-kms-key-id
          filters:  
            branches:
              only:
                - stage
                - main
      # - terraform-validate:
      #     requires:
      #       - linting
      #       - code-formatter-check
      #     filters:  
      #       branches:
      #         only:
      #           - stage
      #           - main
            